#!/bin/bash
#
# Copyright (C) 2015 Petros Koutoupis. All rights reserved.
#

PATH=/bin:/sbin:/usr/bin:/usr/sbin

export PATH

: ${OCF_FUNCTIONS_DIR=/usr/lib/ocf/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs


RDSK_bin="/sbin/rapiddisk"

#######################################################################

metadata()
{
        cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="rapiddisk.sh" version="1.1">
<version>1.1</version>

<longdesc lang="en">
This defines a standard RapidDisk HA failover.
</longdesc>

<shortdesc lang="en">
Defines a standard RapidDisk HA failover.
</shortdesc>

<parameters>
<parameter name="name" unique="0" required="0">
<longdesc lang="en">
This is the name of the resource rule.
</longdesc>
<shortdesc lang="en">Name</shortdesc>
<content type="string"/>
</parameter>

<parameter name="volume" unique="0" required="0">
<longdesc lang="en">
This is the absolute path of the storage device to map with RapidDisk-Cache.
</longdesc>
<shortdesc lang="en">Path of storage device for RapidDisk-Cache.</shortdesc>
<content type="string"/>
</parameter>

<parameter name="size" unique="0" required="0">
<longdesc lang="en">
This is the size of the RapidDisk (and cache for RapidDisk-Cache) volume.
</longdesc>
<shortdesc lang="en">
RapidDisk size.
</shortdesc>
<content type="string"/>
</parameter>
</parameters>

<actions>
<action name="start" timeout="300"/>
<action name="stop" timeout="30"/>
<action name="status" depth="10" timeout="20" interval="30"/>
<action name="monitor" depth="10" timeout="20" interval="30"/>
<action name="meta-data" timeout="5"/>
<action name="validate-all" timeout="5"/>
</actions>
</resource-agent>
END

        exit $OCF_SUCCESS
}


verify_all()
{
	if [ -z "$OCF_RESKEY_name" ]; then
		ocf_log err "Invalid Name Of Service: $OCF_RESKEY_name"
		return $OCF_ERR_ARGS
	fi

	if [ -z "$OCF_RESKEY_volume" ]; then
		ocf_log err "Invalid Name Of Volume: $OCF_RESKEY_volume"
		return $OCF_ERR_ARGS
	fi

        if [ -z "$OCF_RESKEY_size" ]; then
		ocf_log err "Invalid Size Of RapidDisk Volume: $OCF_RESKEY_size"
                return $OCF_ERR_ARGS
        fi

	return $OCF_SUCCESS
}


do_start()
{
	verify_all || exit $?

	if do_status; then
		ocf_log info "Starting Service $OCF_RESOURCE_INSTANCE > Already running"
		return $OCF_SUCCESS
	fi

	output=`$RDSK_bin --attach $OCF_RESKEY_size`
	if [ $? -ne 0 ]; then
		ocf_log info "Unable to create a RapidDisk volume of $OCF_RESKEY_size MB"
		return $OCF_ERR_GENERIC
	fi
	/sbin/cryptsetup isLuks $OCF_RESKEY_volume
	if [ $? -eq 0 ]; then
		$RDSK_bin --activate-crypt $OCF_RESKEY_volume
		if [ $? -ne 0 ]; then
			ocf_log info "Unable to activate encryption on $OCF_RESKEY_volume"
			return $OCF_ERR_GENERIC
		fi
		volume="/dev/mapper/crypt-`echo $OCF_RESKEY_volume|rev|cut -d'/' -f1|rev`"
	else
		volume="$OCF_RESKEY_volume"
	fi
	rdsk=`echo $output|sed -e 's/^.*rd/rd/' -e 's/ .*$//'`
	$RDSK_bin --cache-map $rdsk $volume

        return $OCF_SUCCESS
}


do_stop()
{
	verify_all || exit $?
	crypt=0

	/sbin/cryptsetup isLuks $OCF_RESKEY_volume
	if [ $? -eq 0 ]; then
		cache="rc_rcrypt-`echo $OCF_RESKEY_volume|rev|cut -d'/' -f1|rev`"
		crypt=1
	else
		cache="rc_`echo $OCF_RESKEY_volume|rev|cut -d'/' -f1|rev`"
	fi
	output=`$RDSK_bin --short-list|grep "$cache:"`
	$RDSK_bin --cache-unmap $cache
	$RDSK_bin --detach `echo "$output"|sed -e 's/^rc.*://' -e 's/,.*$//'`
	if [ $crypt -eq "1" ]; then
		$RDSK_bin --deactivate-crypt /dev/mapper/crypt-`echo $OCF_RESKEY_volume|rev|cut -d'/' -f1|rev`
	fi

        return $OCF_SUCCESS
}


do_status()
{
	verify_all || exit $?

	volume=`echo $OCF_RESKEY_volume|rev|cut -d'/' -f1|rev`
	if [ -e "/dev/mapper/rc_$volume" ] || [ -e "/dev/mapper/rc_crypt-$volume" ]; then
		return $OCF_SUCCESS
	fi
	ocf_log debug "RapidDisk resource for $OCF_RESKEY_volume is not running."
	return $OCF_NOT_RUNNING
}


#
#
#

case $1 in
	validate-all|verify-all)
		verify_all
		exit $?
		;;
	start)
		do_start
		exit $?
		;;
	stop)
		do_stop
		exit $?
		;;
	restart)
		do_stop
		do_start
		exit $?
		;;
	status|monitor)
		do_status
		exit $?
		;;
	meta-data)
		metadata
		exit 0
		;;
	*)
		echo "usage: $0 {start|stop|restart|status|meta-data|validate-all}"
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
